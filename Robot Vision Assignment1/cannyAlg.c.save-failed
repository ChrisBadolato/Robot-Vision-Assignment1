//Christopher Badolato
//Robot Vision
//1/10/2020


#include <stdio.h>                  /*  Marr-Hildreth.c  (or marrh.c) */
#include <math.h>
#include <string.h>
#define  PICSIZE 256
#define  MAXMASK 100

        int    pic[PICSIZE][PICSIZE];
        double outpic1[PICSIZE][PICSIZE];
        double outpic2[PICSIZE][PICSIZE];
        int outpicx[256][256];
        int outpicy[256][256];
        int    edgeflag[PICSIZE][PICSIZE];
        double maskx[MAXMASK][MAXMASK];
        double masky[MAXMASK][MAXMASK];
        double conv[PICSIZE][PICSIZE];
        double ival[256][256];

int main(){
        int     i,j,p,q,s,t,mr,centx,centy;
        double  maskval,sum,sum2,sig,maxival,minival,maxval,ZEROTOL,maskxval,maskyval;
        FILE    *fo1, *fo2,*fp1, *fopen();
            char header1[100], string[200];
        int header2, header3, header4, threshold;


        fp1=fopen("C:\\Users\\Chris Badolato\\Desktop\\RobotVision\\garb34.pgm","rb");
        fscanf(fp1, "%s", header1);
        fscanf(fp1, "%s", string);
        fscanf(fp1, "%d %d", &header2, &header3);
        fscanf(fp1, "%d", &header4);

        fo1=fopen("C:\\Users\\Chris Badolato\\Desktop\\RobotVision\\garbCanny1.pgm","wb");
        fprintf(fo1,"P5\n");
        fprintf(fo1,"%d %d\n", 256, 256);
        fprintf(fo1,"255\n");

        fo2=fopen("C:\\Users\\Chris Badolato\\Desktop\\RobotVision\\garbCanny2.pgm","wb");
        fprintf(fo2,"P5\n");
        fprintf(fo2,"%d %d\n", 256, 256);
        fprintf(fo2,"255\n");

        sig = 1;

        ZEROTOL = 1;
        threshold = 1;
        mr = (int)(sig * 6) + 1;
        centx = (MAXMASK / 2);
        centy = (MAXMASK / 2);

        for (i=0;i<256;i++)
        { for (j=0;j<256;j++)
                {
                  pic[i][j]  =  getc (fp1);
                }
        }

        for (p=-mr;p<=mr;p++)
        {  for (q=-mr;q<=mr;q++)
           {
                // q = x
                // p = y
              maskxval = (q*exp(-((pow(q, 2)+ pow(p, 2))/(2*pow(sig, 2)))));
              maskyval = (p*exp(-((pow(q, 2)+ pow(p, 2))/(2*pow(sig, 2)))));
              maskx[p+centy][q+centx] = maskxval;
              masky[p+centy][q+centx] = maskyval;
           }
        }

        for (i=mr;i<=255-mr;i++)
        { for (j=mr;j<=255-mr;j++)
          {
             sum = 0;
             for (p=-mr;p<=mr;p++)
             {
                for (q=-mr;q<=mr;q++)
                {
                   sum += pic[i+p][j+q] * maskx[p+centy][q+centx];
                   sum2 += pic[i+p][j+q] * masky[p+centy][q+centx];
                }
             }
             outpicx[i][j] = sum;
             outpicy[i][j] = sum2;
             // conv[i][j] = sum;
          }
        }

        maxival = 0;
        for (i=mr;i<256-mr;i++){
            for (j=mr;j<256-mr;j++){
                ival[i][j]=sqrt((double)((outpicx[i][j]*outpicx[i][j]) + (outpicy[i][j]*outpicy[i][j])));
                if (ival[i][j] > maxival)
                    maxival = ival[i][j];
            }
        }
        for (i=0;i<256;i++){
            for (j=0;j<256;j++){
                ival[i][j] = (ival[i][j] / maxival) * 255;
                    fprintf(fo1,"%c",(char)((int)(ival[i][j])));
            }
        }

        //maxval  = 0;
       ///maxival = 0;
        //minival = 255;
        /*
        for (i=mr;i<256-mr;i++)
        { for (j=mr;j<256-mr;j++)
          {
             if (outpic1[i][j] > maxival)
                maxival = outpic1[i][j];
             if (outpic1[i][j] < minival)
                minival = outpic1[i][j];
           }
        }
        if (fabs(maxival) > fabs(minival))
           maxval = fabs(maxival);
        else
           maxval = fabs(minival);

       /* for (i=0;i<256;i++)
        { for (j=0;j<256;j++)
          {
             outpic1[i][j] = ((((outpic1[i][j]) / maxval) + 1) * 127);
             fprintf(fo1,"%c",(char)((int)(outpic1[i][j])));
          }
        }

        for (i=mr;i<=255-mr;i++)
        {  for (j=mr;j<=255-mr;j++)
           {
                         outpic2[i][j] = 0;
             if (conv[i][j] > ZEROTOL)
             {
               for (p=-1;p<=1;p++)
               {
                 for (q=-1;q<=1;q++)
                 {
                   if (conv[i+p][j+q] < -ZEROTOL)
                   {
                     outpic2[i][j] = 255;
                   }
                 }
               }
             }
             else if ((fabs)(conv[i][j]) < ZEROTOL)
             {
                     if (((conv[i+1][j] > ZEROTOL) &&
                          (conv[i-1][j] < -ZEROTOL))   ||
                         ((conv[i+1][j] < -ZEROTOL) &&
                          (conv[i-1][j] > ZEROTOL)))
                     {
                       outpic2[i][j] = 255;
                     }
                     else if (((conv[i][j+1] > ZEROTOL) &&
                               (conv[i][j-1] < -ZEROTOL))   ||
                              ((conv[i][j+1] < -ZEROTOL) &&
                               (conv[i][j-1] > ZEROTOL)))
                     {
                       outpic2[i][j] = 255;
                     }
                     else if (((conv[i+1][j+1] > ZEROTOL) &&
                               (conv[i-1][j-1] < -ZEROTOL))   ||
                              ((conv[i+1][j+1] < -ZEROTOL) &&
                               (conv[i-1][j-1] > ZEROTOL)))
                     {
                       outpic2[i][j] = 255;
                     }
                     else if (((conv[i+1][j-1] > ZEROTOL) &&
                               (conv[i-1][j+1] < -ZEROTOL))   ||
                              ((conv[i+1][j-1] < -ZEROTOL) &&
                               (conv[i-1][j+1] > ZEROTOL)))
                     {
                       outpic2[i][j] = 255;
                     }
             }
           }
        }
        */
        /*
        for (i=0;i<256;i++)
        { for (j=0;j<256;j++)
          {  if (outpic2[i][j] == 255) outpic2[i][j]=0;
             else outpic2[i][j]=255;
             fprintf(fo2,"%c",(char)((int)(outpic2[i][j])));
          }
        }
        */
}
